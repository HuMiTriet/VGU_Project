#!/usr/bin/env bash

#written by Huynh Minh Triet - Student ID: 17447
npm config set fetch-retry-mintimeout 20000
npm config set fetch-retry-maxtimeout 120000

cd "$(git rev-parse --show-toplevel)/network" || exit

source ./scripts/utils.sh

# check if user is root to run the script
if [[ $EUID -ne 0 ]]; then
  errorln "This script must be run as root, press password to become root"
  infoln "after pressing password, please run this script again"
  sudo su
  exit 1
fi

# check if manager script exist then add it into /usr/bin
if [[ ! -f /usr/bin/manager ]]; then
  infoln "manager script not found, adding it into /usr/bin"
  ln -s "${PWD}"/manager /usr/bin/manager
  successln "Installation success you can now just type 'manager' in any folder inside VGU_Project_Berlin and it will just work"
else
  infoln "manager script found, skipping"
fi

# find out the terminal emulator that user is using
if [[ -n $DISPLAY ]]; then
  if [[ -n $KONSOLE_DBUS_SERVICE ]]; then
    TERMINAL="konsole"
  # check if alacritty exit
  elif [[ -n $(command -v alacritty) ]]; then
    TERMINAL="alacritty"
  elif [[ -n $GNOME_TERMINAL_SERVICE ]]; then
    TERMINAL="gnome-terminal"
  elif [[ -n $VTE_VERSION ]]; then
    TERMINAL="gnome-terminal"
  elif [[ -n $TERMCAP ]]; then
    TERMINAL="xterm"
  elif [[ -n $COLORTERM ]]; then
    TERMINAL="gnome-terminal"
  elif [[ -n $KONSOLE_PROFILE_NAME ]]; then
    TERMINAL="konsole"
  fi
fi

# if user doesn't have any of the terminal emulator, print error message and exit
if [[ -z $TERMINAL ]]; then
  errorln "You don't have any terminal emulator installed, please install one of them: konsole, alacritty, gnome-terminal, xterm"
  infoln "after installing, please run this script again"
  infoln "xterm is the most lightweight"
  exit 1
fi

# check if bin existed in root directory
if [ ! -d ../bin/ ]; then
  errorln "bin directory not found, the script is assuming that there exist a bin directory in the directory that has the all of the folders: config, chaincode, etc (on the same level)"
  infoln "Please copy the bin directory from the fabric-samples to the directory above"
  infoln "exiting the script..."
  exit 2
else
  export PATH=${PWD}/../bin:$PATH
fi

export FABRIC_CFG_PATH=$PWD/../config/
export ORDERER_CA=${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem

# PEER0_ORG1_CA=${DIR}/test-network/organizations/peerOrganizations/org1.example.com/tlsca/tlsca.org1.example.com-cert.pem
# PEER0_ORG2_CA=${DIR}/test-network/organizations/peerOrganizations/org2.example.com/tlsca/tlsca.org2.example.com-cert.pem
# PEER0_ORG3_CA=${DIR}/test-network/organizations/peerOrganizations/org3.example.com/tlsca/tlsca.org3.example.com-cert.pem

# CURRENT_ORG="NOT SET yet"

switch_to_org1() {
  export FABRIC_CFG_PATH=$PWD/../config/
  export ORDERER_CA=${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem
  export CORE_PEER_TLS_ENABLED=true
  export CORE_PEER_LOCALMSPID="Org1MSP"
  export CORE_PEER_TLS_ROOTCERT_FILE=${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt
  export CORE_PEER_MSPCONFIGPATH=${PWD}/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp
  export CORE_PEER_ADDRESS=localhost:7051
  export CURRENT_ORG="Org1"
}

switch_to_org2() {
  export FABRIC_CFG_PATH=$PWD/../config/
  export ORDERER_CA=${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem
  export CORE_PEER_TLS_ENABLED=true
  export CORE_PEER_LOCALMSPID="Org2MSP"
  export CORE_PEER_TLS_ROOTCERT_FILE=${PWD}/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt
  export CORE_PEER_MSPCONFIGPATH=${PWD}/organizations/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp
  export CORE_PEER_ADDRESS=localhost:9051
  export CURRENT_ORG="Org2"
}

switch_to_org3() {
  export FABRIC_CFG_PATH=$PWD/../config/
  export ORDERER_CA=${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem
  export CORE_PEER_TLS_ENABLED=true
  export CORE_PEER_LOCALMSPID="Org3MSP"
  export CORE_PEER_TLS_ROOTCERT_FILE=${PWD}/organizations/peerOrganizations/org3.example.com/peers/peer0.org3.example.com/tls/ca.crt
  export CORE_PEER_MSPCONFIGPATH=${PWD}/organizations/peerOrganizations/org3.example.com/users/Admin@org3.example.com/msp
  export CORE_PEER_ADDRESS=localhost:11051
  export CURRENT_ORG="Org3"
}

verifyResult() {
  if [ "$1" -ne 0 ]; then
    infoln "Network error (dont know why happens), please run \"manager deploy again\" "
    fatalln "$2"
  fi
}

check_channel_exit() {
  # check if mychannel existed
  if [[ ! -d ./channel-artifacts/ ]]; then
    errorln "Channel does not exist yet, please run \"manager reset\" first "
    exit 3
  fi
}

compile_typescript() {
  if [[ "$CHAINCODE_TYPE" == "public" ]]; then
    directory="chaincode"
    cd "$(git rev-parse --show-toplevel)/${directory}" || exit
    infoln "Compiling typescript files"
    tsc
    successln "compiled successfully!!"
    cd "$(git rev-parse --show-toplevel)/network" || exit
  else
    successln "token-erc-20 chaincode is written in javascript, no need to compile"
  fi
}

commit_chaincode() {
  CHAINCODE_NAME=$1
  CURRENT_VERSION=$2
  NEW_SEQUENCE=$3

  compile_typescript

  infoln "Packaging chaincode ${CHAINCODE_NAME}_${CHAINCODE_VERSION}"
  peer lifecycle chaincode package "${CHAINCODE_NAME}"_"${CHAINCODE_VERSION}".tar.gz --path ../"$directory"/ --lang node --label "${CHAINCODE_NAME}"_"${CHAINCODE_VERSION}"

  infoln "Org1: Installing chaincode ${CHAINCODE_NAME}_${CHAINCODE_VERSION} on peer0.org1.example.com"
  switch_to_org1
  peer lifecycle chaincode install ${CHAINCODE_NAME}_${CHAINCODE_VERSION}.tar.gz

  infoln "Org2: Installing chaincode $CHAINCODE_NAME:$CHAINCODE_VERSION on peer0.org2.example.com"
  switch_to_org2
  peer lifecycle chaincode install ${CHAINCODE_NAME}_${CHAINCODE_VERSION}.tar.gz

  if [[ "$CHANNEL_NAME" == "mychannel" ]]; then
    infoln "Org3: Installing chaincode $CHAINCODE_NAME:$CHAINCODE_VERSION on peer0.org3.example.com"
    switch_to_org3
    peer lifecycle chaincode install ${CHAINCODE_NAME}_${CHAINCODE_VERSION}.tar.gz
  fi

  # getting the package ID
  infoln "Getting the package ID"
  switch_to_org1
  CC_PACKAGE_ID=$(peer lifecycle chaincode calculatepackageid "${CHAINCODE_NAME}"_"${CHAINCODE_VERSION}".tar.gz)

  infoln "Org1: Approving chaincode definition for $CHAINCODE_NAME:$CHAINCODE_VERSION on peer0.org1.example.com"
  switch_to_org1
  peer lifecycle chaincode approveformyorg -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --channelID "$CHANNEL_NAME" --name "${CHAINCODE_NAME}" --version "${CHAINCODE_VERSION}" --package-id "${CC_PACKAGE_ID}" --sequence "$NEW_SEQUENCE" --tls --cafile "$ORDERER_CA"
  echo "finished approving chaincode definition for org1"

  infoln "Org2: Approving chaincode definition for $CHAINCODE_NAME:$CHAINCODE_VERSION on peer0.org2.example.com"
  switch_to_org2
  peer lifecycle chaincode approveformyorg -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --channelID "$CHANNEL_NAME" --name "${CHAINCODE_NAME}" --version "${CHAINCODE_VERSION}" --package-id "${CC_PACKAGE_ID}" --sequence "$NEW_SEQUENCE" --tls --cafile "$ORDERER_CA"
  echo "finished approving chaincode definition for org2"

  if [[ "$CHANNEL_NAME" == "mychannel" ]]; then
    infoln "Org3: Approving chaincode definition for $CHAINCODE_NAME:$CHAINCODE_VERSION on peer0.org3.example.com"
    switch_to_org3
    peer lifecycle chaincode approveformyorg -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --channelID "$CHANNEL_NAME" --name "${CHAINCODE_NAME}" --version "${CHAINCODE_VERSION}" --package-id "${CC_PACKAGE_ID}" --sequence "$NEW_SEQUENCE" --tls --cafile "$ORDERER_CA"
    echo "finished approving chaincode definition for org3"
  fi

  infoln "Current approval state"
  switch_to_org1
  peer lifecycle chaincode checkcommitreadiness --channelID "$CHANNEL_NAME" --name "${CHAINCODE_NAME}" --version "${CHAINCODE_VERSION}" --sequence "$NEW_SEQUENCE" --tls --cafile "$ORDERER_CA" --output json

  # committing the chaincode
  infoln "Org1: Committing chaincode definition for $CHAINCODE_NAME:$CHAINCODE_VERSION on peer0.org1.example.com"
  switch_to_org1
  if [[ "$CHANNEL_NAME" == "mychannel" ]]; then
    peer lifecycle chaincode commit -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --channelID "$CHANNEL_NAME" --name "${CHAINCODE_NAME}" --version "${CHAINCODE_VERSION}" --sequence "${NEW_SEQUENCE}" --tls --cafile "${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem" --peerAddresses localhost:7051 --tlsRootCertFiles "${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt" --peerAddresses localhost:9051 --tlsRootCertFiles "${PWD}/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt" --peerAddresses localhost:11051 --tlsRootCertFiles "${PWD}/organizations/peerOrganizations/org3.example.com/peers/peer0.org3.example.com/tls/ca.crt"
  else
    peer lifecycle chaincode commit -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --channelID "$CHANNEL_NAME" --name "${CHAINCODE_NAME}" --version "${CHAINCODE_VERSION}" --sequence "${NEW_SEQUENCE}" --tls --cafile "${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem" --peerAddresses localhost:7051 --tlsRootCertFiles "${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt" --peerAddresses localhost:9051 --tlsRootCertFiles "${PWD}/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt"
  fi
  successln "chaincode $CHAINCODE_NAME:$CHAINCODE_VERSION committed on channel '$CHANNEL_NAME'"
}

register_org1() {
  export FABRIC_CFG_PATH=$PWD/../config/
  export FABRIC_CA_CLIENT_HOME=${PWD}/organizations/peerOrganizations/org1.example.com/
  fabric-ca-client register --caname ca-org1 --id.name minter --id.secret minterpw --id.type client --tls.certfiles "${PWD}/organizations/fabric-ca/org1/tls-cert.pem"
  fabric-ca-client enroll -u https://minter:minterpw@localhost:7054 --caname ca-org1 -M "${PWD}/organizations/peerOrganizations/org1.example.com/users/minter@org1.example.com/msp" --tls.certfiles "${PWD}/organizations/fabric-ca/org1/tls-cert.pem"
  cp "${PWD}/organizations/peerOrganizations/org1.example.com/msp/config.yaml" "${PWD}/organizations/peerOrganizations/org1.example.com/users/minter@org1.example.com/msp/config.yaml"
}

register_org2() {
  export PATH=${PWD}/../bin:${PWD}:$PATH
  export FABRIC_CA_CLIENT_HOME=${PWD}/organizations/peerOrganizations/org2.example.com/
  fabric-ca-client register --caname ca-org2 --id.name minter --id.secret minterpw --id.type client --tls.certfiles "${PWD}/organizations/fabric-ca/org2/tls-cert.pem"
  fabric-ca-client enroll -u https://minter:minterpw@localhost:8054 --caname ca-org2 -M "${PWD}/organizations/peerOrganizations/org2.example.com/users/minter@org2.example.com/msp" --tls.certfiles "${PWD}/organizations/fabric-ca/org2/tls-cert.pem"
  cp "${PWD}/organizations/peerOrganizations/org2.example.com/msp/config.yaml" "${PWD}/organizations/peerOrganizations/org2.example.com/users/minter@org2.example.com/msp/config.yaml"
}

register_org3() {
  export PATH=${PWD}/../bin:${PWD}:$PATH
  export FABRIC_CFG_PATH=$PWD/../config/
  export FABRIC_CA_CLIENT_HOME=${PWD}/organizations/peerOrganizations/org3.example.com/
  fabric-ca-client register --caname ca-org3 --id.name minter --id.secret minterpw --id.type client --tls.certfiles "${PWD}/organizations/fabric-ca/org3/tls-cert.pem"
  fabric-ca-client enroll -u https://minter:minterpw@localhost:11054 --caname ca-org3 -M "${PWD}/organizations/peerOrganizations/org3.example.com/users/minter@org3.example.com/msp" --tls.certfiles "${PWD}/organizations/fabric-ca/org3/tls-cert.pem"
  cp "${PWD}/organizations/peerOrganizations/org3.example.com/msp/config.yaml" "${PWD}/organizations/peerOrganizations/org3.example.com/users/minter@org3.example.com/msp/config.yaml"
}

switch_to_org1_token() {
  export PATH=${PWD}/../bin:${PWD}:$PATH
  export FABRIC_CFG_PATH=$PWD/../config/
  export FABRIC_CA_CLIENT_HOME=${PWD}/organizations/peerOrganizations/org1.example.com/

  export CORE_PEER_TLS_ENABLED=true
  export CORE_PEER_LOCALMSPID="Org1MSP"
  export CORE_PEER_MSPCONFIGPATH=${PWD}/organizations/peerOrganizations/org1.example.com/users/minter@org1.example.com/msp
  export CORE_PEER_TLS_ROOTCERT_FILE=${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt
  export CORE_PEER_ADDRESS=localhost:7051

  if [[ "$CHANNEL_NAME" == "business" ]]; then
    export TARGET_TLS_OPTIONS=(-o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile "${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem" --peerAddresses localhost:7051 --tlsRootCertFiles "${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt" --peerAddresses localhost:9051 --tlsRootCertFiles "${PWD}/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt")
  elif [[ "$CHANNEL_NAME" == "mychannel" ]]; then
    export TARGET_TLS_OPTIONS=(-o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile "${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem" --peerAddresses localhost:7051 --tlsRootCertFiles "${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt" --peerAddresses localhost:9051 --tlsRootCertFiles "${PWD}/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt" --peerAddresses localhost:11051 --tlsRootCertFiles "${PWD}/organizations/peerOrganizations/org3.example.com/peers/peer0.org3.example.com/tls/ca.crt")
  fi
}

switch_to_org2_token() {
  export PATH=${PWD}/../bin:${PWD}:$PATH
  export FABRIC_CFG_PATH=$PWD/../config/
  export FABRIC_CA_CLIENT_HOME=${PWD}/organizations/peerOrganizations/org2.example.com/

  export CORE_PEER_TLS_ENABLED=true
  export CORE_PEER_LOCALMSPID="Org2MSP"
  export CORE_PEER_MSPCONFIGPATH=${PWD}/organizations/peerOrganizations/org2.example.com/users/minter@org2.example.com/msp
  export CORE_PEER_TLS_ROOTCERT_FILE=${PWD}/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt
  export CORE_PEER_ADDRESS=localhost:9051
  if [[ "$CHANNEL_NAME" == "business" ]]; then
    export TARGET_TLS_OPTIONS=(-o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile "${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem" --peerAddresses localhost:7051 --tlsRootCertFiles "${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt" --peerAddresses localhost:9051 --tlsRootCertFiles "${PWD}/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt")
  elif [[ "$CHANNEL_NAME" == "mychannel" ]]; then
    export TARGET_TLS_OPTIONS=(-o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile "${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem" --peerAddresses localhost:7051 --tlsRootCertFiles "${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt" --peerAddresses localhost:9051 --tlsRootCertFiles "${PWD}/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt" --peerAddresses localhost:11051 --tlsRootCertFiles "${PWD}/organizations/peerOrganizations/org3.example.com/peers/peer0.org3.example.com/tls/ca.crt")
  fi
}

switch_to_org3_token() {
  export PATH=${PWD}/../bin:${PWD}:$PATH
  export FABRIC_CFG_PATH=$PWD/../config/
  export FABRIC_CA_CLIENT_HOME=${PWD}/organizations/peerOrganizations/org3.example.com/
  export FABRIC_CFG_PATH=$PWD/../config/

  export CORE_PEER_TLS_ENABLED=true
  export CORE_PEER_LOCALMSPID="Org3MSP"
  export CORE_PEER_MSPCONFIGPATH=${PWD}/organizations/peerOrganizations/org3.example.com/users/minter@org3.example.com/msp
  export CORE_PEER_TLS_ROOTCERT_FILE=${PWD}/organizations/peerOrganizations/org3.example.com/peers/peer0.org3.example.com/tls/ca.crt
  export CORE_PEER_ADDRESS=localhost:11051
  if [[ "$CHANNEL_NAME" == "business" ]]; then
    export TARGET_TLS_OPTIONS=(-o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile "${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem" --peerAddresses localhost:7051 --tlsRootCertFiles "${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt" --peerAddresses localhost:9051 --tlsRootCertFiles "${PWD}/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt")
  elif [[ "$CHANNEL_NAME" == "mychannel" ]]; then
    export TARGET_TLS_OPTIONS=(-o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile "${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem" --peerAddresses localhost:7051 --tlsRootCertFiles "${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt" --peerAddresses localhost:9051 --tlsRootCertFiles "${PWD}/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt" --peerAddresses localhost:11051 --tlsRootCertFiles "${PWD}/organizations/peerOrganizations/org3.example.com/peers/peer0.org3.example.com/tls/ca.crt")
  fi
}

mint() {
  switch_to_org1_token
  infoln "initialize the token chaincode on $CHANNEL_NAME"
  peer chaincode invoke "${TARGET_TLS_OPTIONS[@]}" -C "$CHANNEL_NAME" -n token_erc20 -c '{"function":"Initialize","Args":["intial mint", "currywurst", "2"]}'

  peer chaincode invoke "${TARGET_TLS_OPTIONS[@]}" -C "$CHANNEL_NAME" -n token_erc20 -c '{"function":"Mint","Args":["5000"]}'
  infoln "ORG1 BALANCE"
  peer chaincode query -C "$CHANNEL_NAME" -n token_erc20 -c '{"function":"ClientAccountBalance","Args":[]}'

  switch_to_org2_token
  peer chaincode invoke "${TARGET_TLS_OPTIONS[@]}" -C "$CHANNEL_NAME" -n token_erc20 -c '{"function":"Mint","Args":["5000"]}'
  infoln "ORG2 BALANCE"
  export CORE_PEER_TLS_ROOTCERT_FILE=${PWD}/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt
  peer chaincode query -C "$CHANNEL_NAME" -n token_erc20 -c '{"function":"ClientAccountBalance","Args":[]}'

  if [[ "$CHANNEL_NAME" == "mychannel" ]]; then
    switch_to_org3_token
    peer chaincode invoke "${TARGET_TLS_OPTIONS[@]}" -C "$CHANNEL_NAME" -n token_erc20 -c '{"function":"Mint","Args":["5000"]}'
    infoln "ORG3 BALANCE"
    export CORE_PEER_TLS_ROOTCERT_FILE=${PWD}/organizations/peerOrganizations/org3.example.com/peers/peer0.org3.example.com/tls/ca.crt
    peer chaincode query -C "$CHANNEL_NAME" -n token_erc20 -c '{"function":"ClientAccountBalance","Args":[]}'
  fi
}

OPTION="$1"

CHAINCODE_TYPE="public"
CHANNEL_NAME="mychannel"

if [[ "$OPTION" == "d" || "$OPTION" == "deploy" ||
  "$OPTION" == "u" || "$OPTION" == "upgrade" ||
  "$OPTION" == "c" || "$OPTION" == "committed" ||
  "$OPTION" == "mint" || "$OPTION" == "mi" ]]; then
  shift
  while getopts 't:c:h' FLAG; do
    case "$FLAG" in
      t)
        if [[ "$OPTARG" == "token" ]]; then
          CHAINCODE_TYPE="token"
          directory="token-erc-20"
        elif [[ "$OPTARG" == "public" ]]; then
          CHAINCODE_TYPE="public"
          directory="chaincode"
        else
          fatalln "Invalid chaincode type either -c token or -c public"
        fi
        ;;
      c)
        if [[ "$OPTARG" == "mychannel" ]]; then
          CHANNEL_NAME="mychannel"
        elif [[ "$OPTARG" == "business" ]]; then
          CHANNEL_NAME="business"
        else
          fatalln "Invalid channel name either -c mychannel or -c business"
        fi
        ;;

      h | ?)
        errorln "Invalid option"
        infoln "Usage: manager u|d|c -t token|public -c mychannel|business
                -t public: deploy public data chaincode (default)
                -t token: deploy responisble for fungible token transfer
                -c mychannel: deploy chaincode on mychannel (default)
                -c business: deploy chaincode on business channel"
        exit 1
        ;;
    esac
  done
  shift "$((OPTIND - 1))"
fi

case "$OPTION" in
  installed | i)
    check_channel_exit
    infoln "List all the chaincode installed on the peers"
    echo "--------------------------------------------------"
    switch_to_org1
    infoln "Org1: peer0.org1.example.com"
    peer lifecycle chaincode queryinstalled
    echo "--------------------------------------------------"
    switch_to_org2
    infoln "Org2: peer0.org2.example.com"
    peer lifecycle chaincode queryinstalled
    echo "--------------------------------------------------"
    infoln "Org3: peer0.org3.example.com"
    switch_to_org3
    peer lifecycle chaincode queryinstalled
    ;;
  committed | c)
    check_channel_exit
    switch_to_org1
    infoln "Org1: peer0.org1.example.com"
    peer lifecycle chaincode querycommitted --channelID "$CHANNEL_NAME"
    ;;

  deploy | d)
    check_channel_exit

    switch_to_org1
    peer lifecycle chaincode querycommitted --channelID "$CHANNEL_NAME"

    if [[ "$CHAINCODE_TYPE" == "public" ]]; then
      CHAINCODE_NAME="basic"
    elif [[ "$CHAINCODE_TYPE" == "token" ]]; then
      CHAINCODE_NAME="token_erc20"
    fi
    # read -p "Enter the name of the chaincode: " -r CHAINCODE_NAME
    CHAINCODE_VERSION="1"

    echo "$CHAINCODE_TYPE"
    echo "$directory"
    echo "$CHAINCODE_NAME"

    if [[ "$CHANNEL_NAME" == "business" ]]; then
      if [[ "$CHAINCODE_TYPE" == "token" ]]; then
        ./network.sh deployCC_business -ccn "$CHAINCODE_NAME" -ccp ../token-erc-20/ -ccl javascript
      elif [[ "$CHAINCODE_TYPE" == "public" ]]; then
        ./network.sh deployCC_business -ccn "$CHAINCODE_NAME" -ccp ../chaincode/ -ccl typescript
      fi
    elif [[ "$CHANNEL_NAME" == "mychannel" ]]; then
      if [[ "$CHAINCODE_TYPE" == "token" ]]; then
        commit_chaincode "$CHAINCODE_NAME" "$CHAINCODE_VERSION" 1
      elif [[ "$CHAINCODE_TYPE" == "public" ]]; then
        commit_chaincode "$CHAINCODE_NAME" "$CHAINCODE_VERSION" 1
      fi
    fi

    ;;

  upgrade | u)
    check_channel_exit

    switch_to_org1
    peer lifecycle chaincode querycommitted --channelID "$CHANNEL_NAME"

    if [[ "$CHAINCODE_TYPE" == "public" ]]; then
      CHAINCODE_NAME="basic"
    elif [[ "$CHAINCODE_TYPE" == "token" ]]; then
      CHAINCODE_NAME="token_erc20"
    fi
    # upgrade chaincode
    #Getting the current version of the chaincode
    CURRENT_VERSION=$(find . -maxdepth 1 -name "${CHAINCODE_NAME}*.tar.gz" | cut -d'_' -f2 | cut -d'.' -f1 | sort -nr | head -n1)
    # get current sequnce
    switch_to_org1
    CURRENT_SEQUENCE=$(peer lifecycle chaincode querycommitted --channelID "$CHANNEL_NAME" --name "${CHAINCODE_NAME}" | awk '{print $4}')
    # echo "awk 6 Current sequence is $CURRENT_SEQUENCE"
    CURRENT_SEQUENCE=$(echo "$CURRENT_SEQUENCE" | sed 's/.$//' | sed -n 2p)
    # echo "Current sequence is $CURRENT_SEQUENCE"
    # increment sequence
    NEW_SEQUENCE=$((CURRENT_SEQUENCE + 1))
    CHAINCODE_VERSION=$((CURRENT_VERSION + 1))

    # infoln "Current version of the chaincode is: $CURRENT_VERSION"
    # warnln "please increment this version for the upgrade"
    # read -p "Enter the version of the chaincode: " -r CHAINCODE_VERSION

    if [[ "$CHANNEL_NAME" == "business" ]]; then
      if [[ "$CHAINCODE_TYPE" == "token" ]]; then
        commit_chaincode "$CHAINCODE_NAME" "$CHAINCODE_VERSION" "$NEW_SEQUENCE"
      elif [[ "$CHAINCODE_TYPE" == "public" ]]; then
        commit_chaincode "$CHAINCODE_NAME" "$CHAINCODE_VERSION" "$NEW_SEQUENCE"
      fi
    elif [[ "$CHANNEL_NAME" == "mychannel" ]]; then
      if [[ "$CHAINCODE_TYPE" == "token" ]]; then
        commit_chaincode "$CHAINCODE_NAME" "$CHAINCODE_VERSION" "$NEW_SEQUENCE"
      elif [[ "$CHAINCODE_TYPE" == "public" ]]; then
        commit_chaincode "$CHAINCODE_NAME" "$CHAINCODE_VERSION" "$NEW_SEQUENCE"
      fi
    fi
    ;;
  purge)
    # ./network.sh down
    # docker rm -f $(docker ps -aq)
    # docker rmi -f $(docker images -q)
    ;;
  down | o)

    read -p "Charles: Are you sure? [y/N] " -n 1 -r
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
      exit 0
    fi

    ./network.sh down
    cd ./addOrg3 || exit
    ./addOrg3.sh down
    # echo "${PWD}"
    cd ..

    cd "${PWD}/organizations/fabric-ca/" || exit
    rm -r "${PWD}/org3"
    # # docker rm -f $(docker ps -aq)
    # # docker rmi -f $(docker images -q)

    ;;
  reset | up | r)

    read -p "Charles Are you sure? [y/N] " -n 1 -r
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
      exit 0
    fi

    ./network.sh down
    cd ./addOrg3 || exit
    ./addOrg3.sh down
    # echo "${PWD}"
    cd ..

    cd "${PWD}/organizations/fabric-ca/" || exit
    rm -r "${PWD}/org3"
    cd ../../
    # docker rm -f $(docker ps -aq)
    # docker rmi -f $(docker images -q)
    "${PWD}/network.sh" up createChannel -s couchdb -ca
    infoln "adding Org 3 !!"
    cd "${PWD}/addOrg3" || exit
    "${PWD}/addOrg3.sh" generate -c mychannel -s couchdb -ca
    "${PWD}/addOrg3.sh" up -c mychannel -s couchdb -ca
    cd ..

    infoln "coping Org3 fabric-ca over to same folder as Org1 and Org2"
    cp -r "${PWD}/addOrg3/fabric-ca/org3" "${PWD}/organizations/fabric-ca/org3"
    chmod 777 "${PWD}/organizations/fabric-ca/org3/fabric-ca-server-config.yaml"

    infoln "ADDING MINTER IDENTITY TO ALL ORGS"
    export PATH=${PWD}/../bin:${PWD}:$PATH
    infoln "ORG1: Register"
    register_org1
    infoln "ORG2: Register"
    register_org2
    infoln "ORG3: Register"
    register_org3

    successln "exist three organizations each with 1 peer use o1, o2, o3 to switch between"
    infoln "type manager dm to deploy chaincode that is responsible for working with Account based token"
    warnln "Each org has a minter identity that can mint tokens and transfer tokens to other users"
    ;;
  register | re)
    export PATH=${PWD}/../bin:${PWD}:$PATH
    infoln "ORG1: Register"
    register_org1
    infoln "ORG2: Register"
    register_org2
    infoln "ORG3: Register"
    register_org3
    ;;
  mint | mi)
    mint
    ;;
  resume)
    ALL_ID=$(docker ps -a | awk '/^CONTAINER/ {next} ;{print $1}')

    for ID in $ALL_ID; do
      docker start "$ID"
    done
    ;;

  pause)
    ALL_ID=$(docker ps -a | awk '/^CONTAINER/ {next} ;{print $1}')

    for ID in $ALL_ID; do
      docker stop -t 3 "$ID"
    done
    ;;
  o1)
    check_channel_exit
    switch_to_org1
    successln "Switched to org1"
    "$TERMINAL" &
    disown
    ;;
  o2)
    check_channel_exit
    switch_to_org2
    successln "Switched to org2"
    "$TERMINAL" &
    disown
    ;;
  o3)
    check_channel_exit
    switch_to_org3
    successln "Switched to org3"
    "$TERMINAL" &
    disown
    ;;
  current | cu)
    if [[ -z $CURRENT_ORG ]]; then
      infoln "Current organization is not set"
    else
      infoln "Current organization is $CURRENT_ORG"
    fi
    ;;
  monitor | m)
    ./monitordocker.sh fabric_test
    ;;

  *)
    # option with flags
    infoln "Usage: manager.sh {installed|committed|deploy|upgrade|down|reset or up|o1|o2|o3}
      installed | i - List all the chaincode installed on the peers 
      committed | c - List all the chaincode committed on the channel (have flags options -c)
      deploy | d - deploy the chaincode (have flags options -t and -c)
      upgrade | u - upgrade chaincode (have flags options -t and -c)
      down | o - stop the network
      reset or up | r - start the network by first shutting down and booting back up
      current | cu - print out the current org
      monitor | m - debug console for all docker messages (console.log() in typescript will be printed here)
      resume - resume docker containers that are not active
      o1 - switch to org1
      o2 - switch to org2
      o3 - switch to org3
      register | re - (this step is done automatically after reset or up) register all the users in the network with an minter identity
      mint | mi - EXPERIMENTAL: mint token (have flags options -t and -c)
      ---
      you can also just type the initials of the command, i.e. 
      'i' for installed, 'c' for committed, 'd' for deploy, 'u' for upgrade, 'o' for down, 'r' for reset or up, 'o1' for org1, 'o2' for org2, 'o3' for org3
      ---
      For the love of God, please do NOT use manager purge before asking Triet Huynh (seriously it will DESTROY all your docker images)
      "
    exit 0
    ;;
esac
