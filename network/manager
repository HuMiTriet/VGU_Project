#!/usr/bin/env bash

#written by Huynh Minh Triet - Student ID: 17447

cd "$(git rev-parse --show-toplevel)/network" || exit

source ./scripts/utils.sh

# check if user is root to run the script
if [[ $EUID -ne 0 ]]; then
  errorln "This script must be run as root, press password to become root"
  infoln "after pressing password, please run this script again"
  sudo su
  exit 1
fi

# check if manager script exist then add it into /usr/bin
if [[ ! -f /usr/bin/manager ]]; then
  infoln "manager script not found, adding it into /usr/bin"
  ln -s "${PWD}"/manager /usr/bin/manager
  successln "Installation success you can now just type 'manager' in any folder inside VGU_Project_Berlin and it will just work"
else
  infoln "manager script found, skipping"
fi

# find out the terminal emulator that user is using
if [[ -n $DISPLAY ]]; then
  if [[ -n $KONSOLE_DBUS_SERVICE ]]; then
    TERMINAL="konsole"
  # check if alacritty exit
  elif [[ -n $(command -v alacritty) ]]; then
    TERMINAL="alacritty"
  elif [[ -n $GNOME_TERMINAL_SERVICE ]]; then
    TERMINAL="gnome-terminal"
  elif [[ -n $VTE_VERSION ]]; then
    TERMINAL="gnome-terminal"
  elif [[ -n $TERMCAP ]]; then
    TERMINAL="xterm"
  elif [[ -n $COLORTERM ]]; then
    TERMINAL="gnome-terminal"
  elif [[ -n $KONSOLE_PROFILE_NAME ]]; then
    TERMINAL="konsole"
  elif [[ -n $WINDOWID ]]; then
    TERMINAL="xterm"
  else
    TERMINAL="xterm"
  fi
else
  TERMINAL="xterm"
fi

# if user doesn't have any of the terminal emulator, print error message and exit
if [[ -z $TERMINAL ]]; then
  errorln "You don't have any terminal emulator installed, please install one of them: konsole, alacritty, gnome-terminal, xterm"
  infoln "after installing, please run this script again"
  infoln "xterm is the most lightweight"
  exit 1
fi

# check if bin existed in root directory
if [ ! -d ../bin/ ]; then
  errorln "bin directory not found, the script is assuming that there exist a bin directory in the directory that has the all of the folders: config, chaincode, etc (on the same level)"
  infoln "Please copy the bin directory from the fabric-samples to the directory above"
  infoln "exiting the script..."
  exit 2
else
  export PATH=${PWD}/../bin:$PATH
fi

export FABRIC_CFG_PATH=$PWD/../config/
export ORDERER_CA=${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem

# PEER0_ORG1_CA=${DIR}/test-network/organizations/peerOrganizations/org1.example.com/tlsca/tlsca.org1.example.com-cert.pem
# PEER0_ORG2_CA=${DIR}/test-network/organizations/peerOrganizations/org2.example.com/tlsca/tlsca.org2.example.com-cert.pem
# PEER0_ORG3_CA=${DIR}/test-network/organizations/peerOrganizations/org3.example.com/tlsca/tlsca.org3.example.com-cert.pem

# CURRENT_ORG="NOT SET yet"

switch_to_org1() {
  export FABRIC_CFG_PATH=$PWD/../config/
  export ORDERER_CA=${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem
  export CORE_PEER_TLS_ENABLED=true
  export CORE_PEER_LOCALMSPID="Org1MSP"
  export CORE_PEER_TLS_ROOTCERT_FILE=${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt
  export CORE_PEER_MSPCONFIGPATH=${PWD}/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp
  export CORE_PEER_ADDRESS=localhost:7051
  export CURRENT_ORG="Org1"
}

switch_to_org2() {
  export FABRIC_CFG_PATH=$PWD/../config/
  export ORDERER_CA=${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem
  export CORE_PEER_TLS_ENABLED=true
  export CORE_PEER_LOCALMSPID="Org2MSP"
  export CORE_PEER_TLS_ROOTCERT_FILE=${PWD}/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt
  export CORE_PEER_MSPCONFIGPATH=${PWD}/organizations/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp
  export CORE_PEER_ADDRESS=localhost:9051
  export CURRENT_ORG="Org2"
}
switch_to_org3() {
  export FABRIC_CFG_PATH=$PWD/../config/
  export ORDERER_CA=${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem
  export CORE_PEER_TLS_ENABLED=true
  export CORE_PEER_LOCALMSPID="Org3MSP"
  export CORE_PEER_TLS_ROOTCERT_FILE=${PWD}/organizations/peerOrganizations/org3.example.com/peers/peer0.org3.example.com/tls/ca.crt
  export CORE_PEER_MSPCONFIGPATH=${PWD}/organizations/peerOrganizations/org3.example.com/users/Admin@org3.example.com/msp
  export CORE_PEER_ADDRESS=localhost:11051
  export CURRENT_ORG="Org3"
}

verifyResult() {
  if [ $1 -ne 0 ]; then
    infoln "Network error (dont know why happens), please run \"manager deploy again\" "
    fatalln "$2"
  fi
}

function installChaincode() {
  ORG=$1
  if [ "$ORG" == "org1" ]; then
    switch_to_org1
  elif [ "$ORG" == "org2" ]; then
    switch_to_org2
  elif [ "$ORG" == "org3" ]; then
    switch_to_org3
  else
    errorln "Invalid organization name, please use org1, org2 or org3"
    exit 1
  fi
  set -x
  peer lifecycle chaincode queryinstalled --output json | jq -r 'try (.installed_chaincodes[].package_id)' | grep ^${CC_PACKAGE_ID}$ >&log.txt

  # # if chaincode has been installed skip
  # if [ $? -eq 0 ]; then
  #   infoln "Chaincode has been installed, skipping..."
  #   set +x
  #   return
  # fi
  if test $? -ne 0; then
    peer lifecycle chaincode install ${CHAINCODE_NAME}_${CHAINCODE_VERSION}.tar.gz >&log.txt
    res=$?
  fi
  { set +x; } 2> /dev/null
  cat log.txt

  verifyResult $res "Chaincode installation on peer0.${ORG} has failed"
  successln "Chaincode is installed on peer0.${ORG}"
}

check_channel_exit() {
  # check if mychannel existed
  if [[ ! -d ./channel-artifacts/ ]]; then
    errorln "Channel does not exist yet, please run \"manager reset\" first "
    exit 3
  fi
}

compile_typescript() {
  cd "$(git rev-parse --show-toplevel)/chaincode" || exit
  infoln "Compiling typescript files"
  tsc
  successln "compiled successfully!!"
  cd "$(git rev-parse --show-toplevel)/network" || exit
}

commit_chaincode() {
  CHAINCODE_NAME=$1
  CURRENT_VERSION=$2
  NEW_SEQUENCE=$3

  compile_typescript

  infoln "Packaging chaincode ${CHAINCODE_NAME}_${CHAINCODE_VERSION}"
  peer lifecycle chaincode package "${CHAINCODE_NAME}"_"${CHAINCODE_VERSION}".tar.gz --path ../chaincode/ --lang node --label "${CHAINCODE_NAME}"_"${CHAINCODE_VERSION}"

  infoln "Org1: Installing chaincode ${CHAINCODE_NAME}_${CHAINCODE_VERSION} on peer0.org1.example.com"
  installChaincode org1

  infoln "Org2: Installing chaincode $CHAINCODE_NAME:$CHAINCODE_VERSION on peer0.org2.example.com"
  installChaincode org2

  infoln "Org3: Installing chaincode $CHAINCODE_NAME:$CHAINCODE_VERSION on peer0.org3.example.com"
  installChaincode org3

  # getting the package ID
  infoln "Getting the package ID"
  switch_to_org1
  CC_PACKAGE_ID=$(peer lifecycle chaincode calculatepackageid "${CHAINCODE_NAME}"_"${CHAINCODE_VERSION}".tar.gz)

  infoln "Org1: Approving chaincode definition for $CHAINCODE_NAME:$CHAINCODE_VERSION on peer0.org1.example.com"
  switch_to_org1
  peer lifecycle chaincode approveformyorg -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --channelID mychannel --name "${CHAINCODE_NAME}" --version "${CHAINCODE_VERSION}" --package-id "${CC_PACKAGE_ID}" --sequence "$NEW_SEQUENCE" --tls --cafile "$ORDERER_CA"
  echo "finished approving chaincode definition for org1"

  infoln "Org2: Approving chaincode definition for $CHAINCODE_NAME:$CHAINCODE_VERSION on peer0.org2.example.com"
  switch_to_org2
  peer lifecycle chaincode approveformyorg -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --channelID mychannel --name "${CHAINCODE_NAME}" --version "${CHAINCODE_VERSION}" --package-id "${CC_PACKAGE_ID}" --sequence "$NEW_SEQUENCE" --tls --cafile "$ORDERER_CA"
  echo "finished approving chaincode definition for org2"

  infoln "Org3: Approving chaincode definition for $CHAINCODE_NAME:$CHAINCODE_VERSION on peer0.org3.example.com"
  switch_to_org3
  peer lifecycle chaincode approveformyorg -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --channelID mychannel --name "${CHAINCODE_NAME}" --version "${CHAINCODE_VERSION}" --package-id "${CC_PACKAGE_ID}" --sequence "$NEW_SEQUENCE" --tls --cafile "$ORDERER_CA"
  echo "finished approving chaincode definition for org3"

  infoln "Current approval state"
  switch_to_org1
  peer lifecycle chaincode checkcommitreadiness --channelID mychannel --name "${CHAINCODE_NAME}" --version "${CHAINCODE_VERSION}" --sequence "$NEW_SEQUENCE" --tls --cafile "$ORDERER_CA" --output json

  # committing the chaincode
  infoln "Org1: Committing chaincode definition for $CHAINCODE_NAME:$CHAINCODE_VERSION on peer0.org1.example.com"
  switch_to_org1
  peer lifecycle chaincode commit -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --channelID mychannel --name "${CHAINCODE_NAME}" --version "${CHAINCODE_VERSION}" --sequence "${NEW_SEQUENCE}" --tls --cafile "${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem" --peerAddresses localhost:7051 --tlsRootCertFiles "${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt" --peerAddresses localhost:9051 --tlsRootCertFiles "${PWD}/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt" --peerAddresses localhost:11051 --tlsRootCertFiles "${PWD}/organizations/peerOrganizations/org3.example.com/peers/peer0.org3.example.com/tls/ca.crt"
  successln "chaincode $CHAINCODE_NAME:$CHAINCODE_VERSION committed on channel mychannel"
}

OPTION="$1"

case "$OPTION" in
  installed | i)
    check_channel_exit
    infoln "List all the chaincode installed on the peers"
    echo "--------------------------------------------------"
    switch_to_org1
    infoln "Org1: peer0.org1.example.com"
    peer lifecycle chaincode queryinstalled
    echo "--------------------------------------------------"
    switch_to_org2
    infoln "Org2: peer0.org2.example.com"
    peer lifecycle chaincode queryinstalled
    echo "--------------------------------------------------"
    infoln "Org3: peer0.org3.example.com"
    switch_to_org3
    peer lifecycle chaincode queryinstalled
    ;;
  committed | c)
    check_channel_exit
    switch_to_org1
    infoln "Org1: peer0.org1.example.com"
    peer lifecycle chaincode querycommitted --channelID mychannel
    ;;

  deploy | d)
    check_channel_exit

    switch_to_org1
    peer lifecycle chaincode querycommitted --channelID mychannel

    read -p "Enter the name of the chaincode: " -r CHAINCODE_NAME
    read -p "Enter the version of the chaincode: " -r CHAINCODE_VERSION

    commit_chaincode "$CHAINCODE_NAME" "$CHAINCODE_VERSION" 1
    ;;

  deploy1)
    check_channel_exit
    compile_typescript

    infoln "Org1: Installing chaincode ${CHAINCODE_NAME}_${CHAINCODE_VERSION} on peer0.org1.example.com"
    installChaincode org1

    infoln "Getting the package ID"
    switch_to_org1
    CC_PACKAGE_ID=$(peer lifecycle chaincode calculatepackageid "${CHAINCODE_NAME}"_"${CHAINCODE_VERSION}".tar.gz)

    infoln "Org1: Approving chaincode definition for $CHAINCODE_NAME:$CHAINCODE_VERSION on peer0.org1.example.com"
    switch_to_org1
    peer lifecycle chaincode approveformyorg -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --channelID mychannel --name "${CHAINCODE_NAME}" --version "${CHAINCODE_VERSION}" --package-id "${CC_PACKAGE_ID}" --sequence "$NEW_SEQUENCE" --tls --cafile "$ORDERER_CA"
    echo "finished approving chaincode definition for org1"
    ;;

  deploy2)
    check_channel_exit
    compile_typescript

    infoln "Org2: Installing chaincode $CHAINCODE_NAME:$CHAINCODE_VERSION on peer0.org2.example.com"
    installChaincode org2

    infoln "Getting the package ID"
    switch_to_org1
    CC_PACKAGE_ID=$(peer lifecycle chaincode calculatepackageid "${CHAINCODE_NAME}"_"${CHAINCODE_VERSION}".tar.gz)

    infoln "Org2: Approving chaincode definition for $CHAINCODE_NAME:$CHAINCODE_VERSION on peer0.org2.example.com"
    switch_to_org2
    peer lifecycle chaincode approveformyorg -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --channelID mychannel --name "${CHAINCODE_NAME}" --version "${CHAINCODE_VERSION}" --package-id "${CC_PACKAGE_ID}" --sequence "$NEW_SEQUENCE" --tls --cafile "$ORDERER_CA"
    echo "finished approving chaincode definition for org2"
    ;;

  deploy3)
    check_channel_exit
    compile_typescript

    infoln "Org3: Installing chaincode $CHAINCODE_NAME:$CHAINCODE_VERSION on peer0.org3.example.com"
    installChaincode org3

    # getting the package ID
    infoln "Getting the package ID"
    switch_to_org1
    CC_PACKAGE_ID=$(peer lifecycle chaincode calculatepackageid "${CHAINCODE_NAME}"_"${CHAINCODE_VERSION}".tar.gz)

    infoln "Org3: Approving chaincode definition for $CHAINCODE_NAME:$CHAINCODE_VERSION on peer0.org3.example.com"
    switch_to_org3
    peer lifecycle chaincode approveformyorg -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --channelID mychannel --name "${CHAINCODE_NAME}" --version "${CHAINCODE_VERSION}" --package-id "${CC_PACKAGE_ID}" --sequence "$NEW_SEQUENCE" --tls --cafile "$ORDERER_CA"
    echo "finished approving chaincode definition for org3"
    ;;

  commit_channel)
    infoln "Current approval state"
    switch_to_org1
    peer lifecycle chaincode checkcommitreadiness --channelID mychannel --name "${CHAINCODE_NAME}" --version "${CHAINCODE_VERSION}" --sequence "$NEW_SEQUENCE" --tls --cafile "$ORDERER_CA" --output json

    # committing the chaincode
    infoln "Org1: Committing chaincode definition for $CHAINCODE_NAME:$CHAINCODE_VERSION on peer0.org1.example.com"
    switch_to_org1
    peer lifecycle chaincode commit -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --channelID mychannel --name "${CHAINCODE_NAME}" --version "${CHAINCODE_VERSION}" --sequence "${NEW_SEQUENCE}" --tls --cafile "${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem" --peerAddresses localhost:7051 --tlsRootCertFiles "${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt" --peerAddresses localhost:9051 --tlsRootCertFiles "${PWD}/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt" --peerAddresses localhost:11051 --tlsRootCertFiles "${PWD}/organizations/peerOrganizations/org3.example.com/peers/peer0.org3.example.com/tls/ca.crt"
    successln "chaincode $CHAINCODE_NAME:$CHAINCODE_VERSION committed on channel mychannel"
    ;;

  upgrade | u)
    check_channel_exit

    switch_to_org1
    peer lifecycle chaincode querycommitted --channelID mychannel

    # upgrade chaincode
    read -p "Enter the name of the chaincode: " -r CHAINCODE_NAME
    #Getting the current version of the chaincode
    CURRENT_VERSION=$(find . -maxdepth 1 -name "${CHAINCODE_NAME}*.tar.gz" | cut -d'_' -f2 | cut -d'.' -f1 | sort -nr | head -n1)
    # get current sequnce
    switch_to_org1
    CURRENT_SEQUENCE=$(peer lifecycle chaincode querycommitted --channelID mychannel --name "${CHAINCODE_NAME}" | awk '{print $4}')
    # echo "awk 6 Current sequence is $CURRENT_SEQUENCE"
    CURRENT_SEQUENCE=$(echo "$CURRENT_SEQUENCE" | sed 's/.$//' | sed -n 2p)
    # echo "Current sequence is $CURRENT_SEQUENCE"
    # increment sequence
    NEW_SEQUENCE=$((CURRENT_SEQUENCE + 1))

    infoln "Current version of the chaincode is: $CURRENT_VERSION"
    warnln "please increment this version for the upgrade"
    read -p "Enter the version of the chaincode: " -r CHAINCODE_VERSION

    commit_chaincode "$CHAINCODE_NAME" "$CHAINCODE_VERSION" "$NEW_SEQUENCE"

    ;;
  down | o)
    ./network.sh down
    docker stop "$(docker ps -a -q)"
    docker rm "$(docker ps -a -q)"
    ;;
  reset | up | r)
    ./network.sh down
    docker stop "$(docker ps -a -q)"
    docker rm "$(docker ps -a -q)"
    ./network.sh up createChannel -s couchdb -ca
    infoln "adding Org 3 !!"
    cd addOrg3 || exit
    ./addOrg3.sh up -c mychannel -s couchdb -ca
    successln "exist three organizations each with 1 peer use o1, o2, o3 to switch between"
    ;;
  o1)
    check_channel_exit
    switch_to_org1
    successln "Switched to org1"
    "$TERMINAL" &
    disown
    ;;
  o2)
    check_channel_exit
    switch_to_org2
    successln "Switched to org2"
    "$TERMINAL" &
    disown
    ;;
  o3)
    check_channel_exit
    switch_to_org3
    successln "Switched to org3"
    "$TERMINAL" &
    disown
    ;;
  current | cu)
    if [[ -z $CURRENT_ORG ]]; then
      infoln "Current organization is not set"
    else
      infoln "Current organization is $CURRENT_ORG"
    fi
    ;;
  monitor | m)
    ./monitordocker.sh fabric_test
    ;;
  *)
    # option with flags
    infoln "Usage: manager.sh {installed|committed|deploy|upgrade|down|reset or up|o1|o2|o3}
      installed | i - List all the chaincode installed on the peers 
      committed | c - List all the chaincode committed on the channel
      deploy | d - deploy the chaincode
      upgrade | u - upgrade chaincode
      down | o - stop the network
      reset or up | r - start the network by first shutting down and booting back up
      current | cu - print out the current org
      monitor | m - debug console for all docker messages (console.log() in typescript will be printed here)
      o1 - switch to org1
      o2 - switch to org2
      o3 - switch to org3
      ---
      you can also just type the initials of the command, i.e. 
      'i' for installed, 'c' for committed, 'd' for deploy, 'u' for upgrade, 'o' for down, 'r' for reset or up, 'o1' for org1, 'o2' for org2, 'o3' for org3
      ---
      "
    exit 1
    ;;
esac
